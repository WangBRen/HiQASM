stages:
  - deploy

variables:
  DEPLOY_DIR: /opt/hiq-master
  DOCKER_DRIVER: overlay

deploy_qa:
  stage: deploy
  image: gitlab/dind:latest
  environment: qa
  only:
    - "master"
  services:
    - docker:dind
  before_script:
    - mkdir -p ~/.ssh
    - echo "${QA_SERVER_PK}" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H ${QA_SERVER_IP} >> ~/.ssh/known_hosts
    - echo "${QA_SERVER_PEM}" > ./ha_proxy/private/localhost.pem
  script:
    - ssh ${QA_SERVER_USER}@${QA_SERVER_IP} "mkdir -p ${DEPLOY_DIR}"
    - scp -r ./* ${QA_SERVER_USER}@${QA_SERVER_IP}:${DEPLOY_DIR}
    - ssh ${QA_SERVER_USER}@${QA_SERVER_IP} "cd ${DEPLOY_DIR}; cp ./${CI_ENVIRONMENT_NAME}.env ./.env; set -o allexport; source ./.env; set +o allexport; mkdir -p ${RABBITMQ_DATA_DIR}; mkdir -p ${REDIS_DATA_DIR}; docker-compose down; docker-compose up --build -d; docker system prune -f"
    
deploy_prod:
  stage: deploy
  image: gitlab/dind:latest
  environment: prod
  only:
    - prod
  when: manual
  services:
    - docker:dind
  before_script:
    - mkdir -p ~/.ssh
    - echo "${PROD_SERVER_PK}" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H ${PROD_SERVER_IP} >> ~/.ssh/known_hosts
    - echo "${PROD_SERVER_PEM}" > ./ha_proxy/private/localhost.pem
  script:
    - ssh ${PROD_SERVER_USER}@${PROD_SERVER_IP} "mkdir -p ${DEPLOY_DIR}"
    - scp -r ./* ${PROD_SERVER_USER}@${PROD_SERVER_IP}:${DEPLOY_DIR}
    - ssh ${PROD_SERVER_USER}@${PROD_SERVER_IP} "docker service rm registry; docker service create --name registry --publish published=5000,target=5000 registry:2"
    - ssh ${PROD_SERVER_USER}@${PROD_SERVER_IP} "cd ${DEPLOY_DIR}; cp ./${CI_ENVIRONMENT_NAME}.env ./.env; set -o allexport; source ./.env; set +o allexport; mkdir -p ${RABBITMQ_DATA_DIR}; mkdir -p ${REDIS_DATA_DIR}; docker-compose build; docker-compose push; docker stack deploy --compose-file docker-compose.yml hiq-master; docker system prune -f"
    